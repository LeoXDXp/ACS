/*
#ifndef _BULKDATA_SENDER_IDL_
#define _BULKDATA_SENDER_IDL_


#include <baci.idl>
#include <ACSBulkDataError.idl>
#include <AVStreams.idl>
#include <bulkData.idl>
#include <bulkDataReceiver.idl>

#pragma prefix "alma"

/** @file bulkDataSender.idl
 *  Bulk Data Sender's IDL File (Sender Component).
 

module bulkdata
{
    /** @interface BulkDataSender: Defines the interface for the Bulk Data Sender Component.
     
    interface BulkDataSender : ACS::CharacteristicComponent
	{
	/*  Initializes the TAO A/V, and creates the Sender Stream End Point and Flow End Point. It retrieves the Receiver Stream End Point and binds the two streams.
	 *  @param receiver reference of the Receiver Component.
	 *  @return void
	 *  @htmlonly
	 <br><hr>
	 @endhtmlonly
	
	void connect(in BulkDataReceiver receiver)
	    raises (ACSBulkDataError::AVConnectErrorEx);

	/*******************************
    void connect(in BulkDataReceiver receiver, in FepCfgSeq senderFepsInfo)
      raises (ACSBulkDataError::AVConnectError);
	********************************/

	/**
	 *  Disconnect // TBD
	 *  @return void
	 *  @htmlonly
	 <br><hr>
	 @endhtmlonly
	
	void disconnect()
	    raises (ACSBulkDataError::AVDisconnectErrorEx);

	/** 
	 *  Calls the Receiver handle_start() method once the connection is established.
	 *  @return void
	 *  @htmlonly
	 <br><hr>
	 @endhtmlonly
	
	void startSend()
	    raises (ACSBulkDataError::AVStartSendErrorEx);

	/** 
	 *  Sends data to the Receiver calling the receive_frame() method on the Receiver side. This method must be overriden by the user to send his own data.
	 *  @param size buffer size of the sent data.
	 *  @return void
	 *  @htmlonly
	 <br><hr>
	 @endhtmlonly
	
	void paceData()
	    raises (ACSBulkDataError::AVPaceDataErrorEx);

	/** 
	 *  Calls the Receiver handle_stop() method.
	 *  @return void
	 *  @htmlonly
	 <br><hr>
	 @endhtmlonly
	
	void stopSend()
	    raises (ACSBulkDataError::AVStopSendErrorEx);
	};
  
};
#endif
*/
